//TC:O(n)
//SC: O(n)
/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
        
        if(node == null)
        {
            return null;
        }    
        
        HashMap<Node, Node> map = new HashMap<>();
        dfs(node, map);
        return  map.get(node);
        
        
    }
    
    private void dfs(Node node, HashMap<Node, Node> map)
    {
        Node copy = new Node(node.val);
        map.put(node, copy);
        for(Node neighbor : node.neighbors)
        {
            if(!map.containsKey(neighbor))
            {
                Node copyNeighbor = new Node(neighbor.val);
                map.put(neighbor, copyNeighbor);
                dfs(neighbor, map);
                
            }
            
            map.get(node).neighbors.add(map.get(neighbor));
        }
    }
}
